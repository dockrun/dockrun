#!/bin/bash

currentDir=$(dirname $0)
. $currentDir/../lib/dockrun-common

usage()
{
  local appName=$1
  local errorMsg=$2
  local errorCode=$3

  if [ "$appName" == "" ]; then
    appName=dockrun
  fi

  if [ "$errorMsg" != "" ]; then
    echo "ERROR: $errorMsg"
  fi

  echo ""
  echo "$appName [arguments] executeable [executableArguments]"
  echo ""
  echo "    -h, --help"                                             Prints this help text.
  echo "    -p package-name, --package=package-name                 Name of package to install from alpine repositories."
  echo "                                                              If specified, container base image is always (re)built."
  echo "                                                              Default is same as executable name."
  echo "    -r requirements-file, --requirements=requirements-file  Use a requirements file specifying packages to install within"
  echo "                                                              container. If specified, container base image is"
  echo "                                                              always (re)built."
  echo ""

  if [ "$errorCode" != "" ]; then
    exit $errorCode
  fi
  exit 1
}

buildimage()
{
  local imagename=$1
  local requirements=$2
  local dfiledir=$3
  local dockerExec=$(getDockerExec)

  # If WSL, create win path
  if [ "$(getPosixOrWindows)" = "windows" ]
  then
    dfiledir=$(wslpath -w $dfiledir)
  fi

  echo ""
  echo "Building new image $imagename"
  echo "---"
  # Pull latest alpine (our base)
  $dockerExec pull alpine

  # Build an image containing our command
  cat > $dfile << _EOF_
FROM alpine:latest
RUN apk update && apk add $requirements
WORKDIR /root
_EOF_
$dockerExec build -t $imagename $dfiledir

  if [ $? -ne 0 ]
  then
    echo "Failed to build $dockerExec container!"
    exit 2
  fi
  rm -rf $dfiledir
}

# Capture empty run
if [ $# -eq 0 ]
then
  usage $0 "Incorrect usage!" 2
fi

# Parse args
while [ "$(echo $1 | head -c 1)" == "-" ]; do
  param=`echo $1 | awk -F= '{print $1}'`
  longValue=`echo $1 | awk -F= '{print $2}'`
  shortValue=$2
  case $param in
    -h | --help)
      usage $0
      exit
      ;;
    --package)
      if [ "$longValue" != "" ]
      then
        package=$longValue
      else
        usage $0 "Incorrect usage" 2
      fi
      ;;
    -p)
      if [ "$shortValue" != "" ]
      then
        package=$shortValue
      else
        usage $0 "Incorrect usage" 2
      fi
      shift
      ;;
    -r)
      if [ "$shortValue" != "" ]
      then
        requirementsFile=$shortValue
      else
        usage $0 "Incorrect usage" 2
      fi
      shift
      ;;
    --requirements)
      if [ "$longValue" != "" ]
      then
        requirementsFile=$longValue
      else
        usage $0 "Incorrect usage" 2
      fi
      ;;
    -* | --*)
      usage $0 "Incorrect usage" 2
  esac
  shift
done

# Some params needed
dockRm=$(dirname $0)/dockrm
app=$1
arguments="${@:2}"
dateStr=$(date +%Y-%m-%d_%H:%M)

# If the user specified a requirements file, force build image
if [ "$requirementsFile" != "" ]
then
  package=$(cat $requirementsFile | sed ':a;N;$!ba;s/\n/ /g')
  forceBuild=true
elif [ "$package" == "" ] # If the user did not specify package, use app name
then
  package=$app
else # If user specified package, force building base image
  forceBuild=true
fi

containername=dockrun-$1
imagename=$containername-image

dfiledir=$(getHome)/.dockrun/$imagename-$dateStr
dfile=$dfiledir/Dockerfile
mkdir -p $dfiledir

# Docker exec name
dockerExec=$(getDockerExec)

# Check if an image already exists, if not build it
$dockerExec images |grep $imagename > /dev/null
imageExist=$?

if [ $imageExist -ne 0 ]
then
  buildimage $imagename "$package" $dfiledir
elif [ $forceBuild ]
then
  $dockRm $app $arguments
  buildimage $imagename "$package" $dfiledir
fi

# Run a container of said image, then cleanup
$dockerExec run --name $containername -v $(getSystemPath $(pwd)):/root $imagename $app $arguments

cleanupValue=$($dockerExec container rm $containername)
if [ "$cleanupValue" != "$containername" ]
then
  echo "Failed to remove temporary container: $containername"
  exit 4
fi

